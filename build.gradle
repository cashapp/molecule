buildscript {
  dependencies {
    classpath libs.android.plugin
    classpath libs.kotlin.plugin
    classpath libs.maven.publish.plugin
    classpath libs.dokka.plugin
    classpath libs.spotless.plugin
    classpath libs.buildConfig.plugin

    // Normally you would declare a version here, but we use dependency substitution in
    // settings.gradle to use the version built from inside the repo.
    classpath 'app.cash.molecule:molecule-gradle-plugin'
  }

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }
}

apply plugin: 'org.jetbrains.dokka'

allprojects {
  version = property("VERSION_NAME") as String

  repositories {
    mavenCentral()
    google()
  }
}

subprojects {
  tasks.withType(Test).configureEach {
    testLogging {
      if (System.getenv("CI") == "true") {
        events = ["failed", "skipped", "passed"]
      }
      exceptionFormat "full"
    }
  }

  plugins.withId('java-base') {
    java {
      toolchain {
        languageVersion = JavaLanguageVersion.of(11)
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach { task ->
    task.kotlinOptions {
      jvmTarget = '11'
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach {
    def android = extensions.getByName("android") as com.android.build.gradle.BaseExtension
    android.compileSdkVersion libs.versions.compileSdk.get().toInteger()
    android.defaultConfig {
      minSdkVersion libs.versions.minSdk.get().toInteger()
      targetSdkVersion libs.versions.compileSdk.get().toInteger()
    }
    android.compileOptions {
      sourceCompatibility JavaVersion.VERSION_11
      targetCompatibility JavaVersion.VERSION_11
    }
    android.lintOptions {
      checkDependencies true
      checkReleaseBuilds false // Full lint runs as part of 'build' task.
    }
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    kotlin {
      target("src/**/*.kt")
      ktlint().editorConfigOverride([
        'ktlint_standard_filename': 'disabled',
      ])
      licenseHeaderFile(rootProject.file('gradle/license-header.txt'))
    }
  }

  plugins.withId('maven-publish') {
    publishing {
      repositories {
        maven {
          name = "installLocally"
          url = "${rootProject.buildDir}/localMaven"
        }
      }
    }
  }
}
