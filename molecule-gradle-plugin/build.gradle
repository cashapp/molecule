apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.github.gmazzo.buildconfig'

// This module is included in two projects:
// - In the root project where it's released as one of our artifacts
// - In build-logic project where we can use it for the test-schema and samples.
//
// We only want to publish when it's being built in the root project.
if (rootProject.name == 'molecule') {
  apply plugin: 'com.vanniktech.maven.publish'
  apply plugin: 'org.jetbrains.dokka'
}

dependencies {
  compileOnly gradleApi()
  api libs.kotlin.plugin

  testImplementation libs.junit
  testImplementation libs.assertk
  testImplementation gradleTestKit()
}

test {
  dependsOn(':molecule-gradle-plugin:publishAllPublicationsToInstallLocallyRepository')
  dependsOn(':molecule-runtime:publishAllPublicationsToInstallLocallyRepository')

  inputs.dir('src/test/fixtures')

  testLogging {
    if (System.getenv("CI") == "true") {
      events = ["failed", "skipped", "passed"]
    }
    exceptionFormat "full"
  }
}

gradlePlugin {
  plugins {
    molecule {
      id = "app.cash.molecule"
      displayName = "Molecule"
      description = "Molecule Gradle plugin"
      implementationClass = "app.cash.molecule.gradle.MoleculePlugin"
    }
  }
}

buildConfig {
  useKotlinOutput {
    internalVisibility = true
    topLevelConstants = true
  }

  packageName('app.cash.molecule.gradle')
  buildConfigField("String", "composeCompilerGroupId", "\"${libs.jetbrains.compose.compiler.get().module.group}\"")
  buildConfigField("String", "composeCompilerArtifactId", "\"${libs.jetbrains.compose.compiler.get().module.name}\"")
  buildConfigField("String", "composeCompilerVersion", "\"${libs.jetbrains.compose.compiler.get().version}\"")
  buildConfigField("String", "moleculeVersion", "\"${project.version}\"")
}
