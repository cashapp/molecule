apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'app.cash.molecule'

kotlin {
  explicitApi()

  android {
    publishLibraryVariants('release')
  }

  iosArm64()
  iosSimulatorArm64()
  iosX64()

  js {
    browser()
  }

  jvm()

  linuxX64()

  macosArm64()
  macosX64()

  mingwX64()

  tvosArm64()
  tvosSimulatorArm64()
  tvosX64()

  watchosArm32()
  watchosArm64()
  watchosSimulatorArm64()
  watchosX64()
  watchosX86()

  sourceSets {
    commonMain {
      dependencies {
        api libs.compose.runtime
        api libs.kotlinx.coroutines.core
      }
    }
    commonTest {
      dependencies {
        implementation libs.kotlin.test
        implementation libs.kotlinx.coroutines.test
      }
    }

    androidMain {
      dependencies {
        implementation libs.androidx.core
      }
    }

    darwinMain {
      dependsOn(commonMain)
    }
    darwinTest {
      dependsOn(commonTest)
    }

    quartzCoreMain {
      dependsOn(darwinMain)
    }
    macosMain {
      dependsOn(darwinMain)
    }
  }

  targets.each { target ->
    if (target.name.startsWith('ios') || target.name.startsWith('tvos')) {
      target.compilations.main.defaultSourceSet.dependsOn(sourceSets.quartzCoreMain)
      // TODO Link against XCTest in order to get frame pulses on iOS/tvOS.
      // target.compilations.test.defaultSourceSet.dependsOn(sourceSets.darwinTest)
    } else if (target.name.startsWith('macos')) {
      target.compilations.main.defaultSourceSet.dependsOn(sourceSets.macosMain)
      target.compilations.test.defaultSourceSet.dependsOn(sourceSets.darwinTest)
    }
  }
}

dependencies {
  androidTestImplementation libs.androidx.test.runner
  androidTestImplementation libs.kotlin.test
  androidTestImplementation libs.kotlinx.coroutines.test
}

android {
  namespace 'app.cash.molecule'

  sourceSets {
    androidTest {
      java.srcDirs += 'src/commonTest/kotlin'
    }
  }

  defaultConfig {
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  packagingOptions {
    exclude 'META-INF/AL2.0'
    exclude 'META-INF/LGPL2.1'
  }
}

spotless {
  kotlin {
    targetExclude(
      // Apache 2-licensed files from AOSP.
      "src/androidMain/kotlin/app/cash/molecule/AndroidUiDispatcher.kt",
      "src/androidMain/kotlin/app/cash/molecule/AndroidUiFrameClock.kt",
    )
  }
}
